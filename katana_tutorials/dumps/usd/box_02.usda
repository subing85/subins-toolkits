#usda 1.0
(
    defaultPrim = "world"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def Xform "world" (
    kind = "component"
)
{
    def Mesh "pCube1"
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
        rel material:binding = </world/Looks/lambert1SG>
        point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
        float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.5), (0.375, 0.5), (0.625, 0.75), (0.375, 0.75), (0.625, 1), (0.375, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [0, 1, 2, 3, 3, 2, 4, 5, 5, 4, 6, 7, 7, 6, 8, 9, 1, 10, 11, 2, 12, 0, 3, 13]
        double3 xformOp:translate = (-2.2794514705188456, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Mesh "pCube2"
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
        rel material:binding = </world/Looks/lambert2SG>
        point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
        float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.5), (0.375, 0.5), (0.625, 0.75), (0.375, 0.75), (0.625, 1), (0.375, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [0, 1, 2, 3, 3, 2, 4, 5, 5, 4, 6, 7, 7, 6, 8, 9, 1, 10, 11, 2, 12, 0, 3, 13]
        double3 xformOp:translate = (0.9653958780238567, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Mesh "pCube3"
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
        rel material:binding = </world/Looks/PxrDisney1SG>
        point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
        float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.5), (0.375, 0.5), (0.625, 0.75), (0.375, 0.75), (0.625, 1), (0.375, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [0, 1, 2, 3, 3, 2, 4, 5, 5, 4, 6, 7, 7, 6, 8, 9, 1, 10, 11, 2, 12, 0, 3, 13]
        double3 xformOp:translate = (-2.2794514705188456, 0, -2.3179893784784693)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Mesh "pCube4"
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
        rel material:binding = </world/Looks/PxrDisney2SG>
        point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
        float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.5), (0.375, 0.5), (0.625, 0.75), (0.375, 0.75), (0.625, 1), (0.375, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [0, 1, 2, 3, 3, 2, 4, 5, 5, 4, 6, 7, 7, 6, 8, 9, 1, 10, 11, 2, 12, 0, 3, 13]
        double3 xformOp:translate = (0.9653958780238567, 0, -2.3179893784784693)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Scope "Looks"
    {
        def Material "lambert1SG"
        {
        }

        def Material "lambert2SG"
        {
        }

        def Material "PxrDisney1SG"
        {
            token outputs:ri:surface.connect = </world/Looks/PxrDisney1SG/PxrDisney1.outputs:out>

            def Shader "PxrDisney1"
            {
                uniform token info:id = "PxrDisney"
                float inputs:anisotropic = 0
                color3f inputs:baseColor.connect = </world/Looks/PxrDisney1SG/PxrTexture1.outputs:resultRGB>
                float3 inputs:bumpNormal = (0, 0, 0)
                bool inputs:caching = 0
                float inputs:clearcoat = 0
                float inputs:clearcoatGloss = 1
                color3f inputs:emitColor = (0, 0, 0)
                bool inputs:frozen = 0
                int inputs:inputAOV = 0
                int inputs:isHistoricallyInteresting = 2
                float inputs:metallic = 0
                int inputs:nodeState = 0
                float inputs:presence = 1
                float inputs:roughness = 0.25
                bool inputs:shadowBumpTerminator = 0
                float inputs:sheen = 0
                float inputs:sheenTint = 0.5
                float inputs:specular = 0.5
                float inputs:specularTint = 0
                float inputs:subsurface = 0
                color3f inputs:subsurfaceColor = (0, 0, 0)
                token outputs:out
            }

            def Shader "PxrTexture1"
            {
                uniform token info:id = "PxrTexture"
                float inputs:alphaOffset = 0
                float inputs:alphaScale = 1
                int inputs:atlasStyle = 0
                float inputs:blur = 0
                bool inputs:caching = 0
                color3f inputs:colorOffset = (0, 0, 0)
                color3f inputs:colorScale = (1, 1, 1)
                asset inputs:filename = @/venture/shows/katana_tutorials/dumps/source_images/batman/tx/tongue.tx@
                int inputs:filter = 1
                int inputs:firstChannel = 0
                bool inputs:frozen = 0
                bool inputs:invertT = 1
                int inputs:isHistoricallyInteresting = 2
                bool inputs:lerp = 1
                bool inputs:linearize = 0
                string inputs:manifold = ""
                float inputs:maxResolution = 0
                int inputs:mipBias = 0
                float inputs:missingAlpha = 1
                color3f inputs:missingColor = (1, 0, 1)
                int inputs:nodeState = 0
                bool inputs:optimizeIndirect = 1
                float inputs:saturation = 1
                color3f outputs:resultRGB
            }
        }

        def Material "PxrDisney2SG"
        {
            token outputs:ri:surface.connect = </world/Looks/PxrDisney2SG/PxrDisney2.outputs:out>

            def Shader "PxrDisney2"
            {
                uniform token info:id = "PxrDisney"
                float inputs:anisotropic = 0
                color3f inputs:baseColor.connect = </world/Looks/PxrDisney2SG/PxrTexture2.outputs:resultRGB>
                float3 inputs:bumpNormal = (0, 0, 0)
                bool inputs:caching = 0
                float inputs:clearcoat = 0
                float inputs:clearcoatGloss = 1
                color3f inputs:emitColor = (0, 0, 0)
                bool inputs:frozen = 0
                int inputs:inputAOV = 0
                int inputs:isHistoricallyInteresting = 2
                float inputs:metallic = 0
                int inputs:nodeState = 0
                float inputs:presence = 1
                float inputs:roughness = 0.25
                bool inputs:shadowBumpTerminator = 0
                float inputs:sheen = 0
                float inputs:sheenTint = 0.5
                float inputs:specular = 0.5
                float inputs:specularTint = 0
                float inputs:subsurface = 0
                color3f inputs:subsurfaceColor = (0, 0, 0)
                token outputs:out
            }

            def Shader "PxrTexture2"
            {
                uniform token info:id = "PxrTexture"
                float inputs:alphaOffset = 0
                float inputs:alphaScale = 1
                int inputs:atlasStyle = 0
                float inputs:blur = 0
                bool inputs:caching = 0
                color3f inputs:colorOffset = (0, 0, 0)
                color3f inputs:colorScale = (1, 1, 1)
                asset inputs:filename = @/venture/shows/katana_tutorials/dumps/source_images/batman/tx/belt.tx@
                int inputs:filter = 1
                int inputs:firstChannel = 0
                bool inputs:frozen = 0
                bool inputs:invertT = 1
                int inputs:isHistoricallyInteresting = 2
                bool inputs:lerp = 1
                bool inputs:linearize = 0
                string inputs:manifold = ""
                float inputs:maxResolution = 0
                int inputs:mipBias = 0
                float inputs:missingAlpha = 1
                color3f inputs:missingColor = (1, 0, 1)
                int inputs:nodeState = 0
                bool inputs:optimizeIndirect = 1
                float inputs:saturation = 1
                color3f outputs:resultRGB
            }
        }
    }
}

