#usda 1.0
(
    defaultPrim = "world"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def Xform "world" (
    kind = "component"
)
{
    def Mesh "pCube1"
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
        rel material:binding = </world/Looks/lambert1SG>
        point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
        color3f[] primvars:displayColor = [(0, 0, 0)] (
            customData = {
                dictionary Maya = {
                    bool generated = 1
                }
            }
        )
        float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.5), (0.375, 0.5), (0.625, 0.75), (0.375, 0.75), (0.625, 1), (0.375, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [0, 1, 2, 3, 3, 2, 4, 5, 5, 4, 6, 7, 7, 6, 8, 9, 1, 10, 11, 2, 12, 0, 3, 13]
        double3 xformOp:translate = (-2.2794514705188456, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Mesh "pCube2"
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
        rel material:binding = </world/Looks/lambert2SG>
        point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
        color3f[] primvars:displayColor = [(0, 0, 0)] (
            customData = {
                dictionary Maya = {
                    bool generated = 1
                }
            }
        )
        float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.5), (0.375, 0.5), (0.625, 0.75), (0.375, 0.75), (0.625, 1), (0.375, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [0, 1, 2, 3, 3, 2, 4, 5, 5, 4, 6, 7, 7, 6, 8, 9, 1, 10, 11, 2, 12, 0, 3, 13]
        double3 xformOp:translate = (0.9653958780238567, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Scope "Looks"
    {
        def Material "lambert1SG"
        {
            color3f inputs:displayColor = (0, 0, 0)
            float inputs:displayOpacity
            color3f inputs:transparency
            token outputs:ri:surface.connect = </world/Looks/lambert1SG/lambert1SG_lambert.outputs:out>

            def Shader "lambert1SG_lambert"
            {
                uniform token info:id = "PxrDiffuse"
                color3f inputs:diffuseColor.connect = </world/Looks/lambert1SG.inputs:displayColor>
                color3f inputs:transmissionColor.connect = </world/Looks/lambert1SG.inputs:transparency>
                token outputs:out
            }
        }

        def Material "lambert2SG"
        {
            color3f inputs:displayColor = (0, 0, 0)
            float inputs:displayOpacity
            color3f inputs:transparency
            token outputs:ri:surface.connect = </world/Looks/lambert2SG/lambert2SG_lambert.outputs:out>

            def Shader "lambert2SG_lambert"
            {
                uniform token info:id = "PxrDiffuse"
                color3f inputs:diffuseColor.connect = </world/Looks/lambert2SG.inputs:displayColor>
                color3f inputs:transmissionColor.connect = </world/Looks/lambert2SG.inputs:transparency>
                token outputs:out
            }
        }
    }
}

